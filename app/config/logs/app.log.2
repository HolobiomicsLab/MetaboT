2024-04-26 17:08:56 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an entity resolution agent for the Sparql_query_runner.\nYou have access to the following tools:\nTARGET_RESOLVER\nSMILES_RESOLVER\nCHEMICAL_RESOLVER\nTAXON_RESOLVER\nYou should analyze the question and provide resolved entities to the supervisor. Here is a list of steps to help you accomplish your role:\nIf the question ask anything about any entities that could be natural product compound, find the relevant IRI to this chemical class using CHEMICAL_RESOLVER. Input is the chemical class name. For example, if salicin is mentioned in the question, provide its IRI using CHEMICAL_RESOLVER, input is salicin.\n\nIf a taxon is mentioned, find what is its wikidata IRI with TAXON_RESOLVER. Input is the taxon name. For example, if the question mentions acer saccharum, you should provide it\'s wikidata IRI using TAXON_RESOLVER tool.\n\nIf a target is mentioned, find the ChEMBLTarget IRI of the target with TARGET_RESOLVER. Input is the target name.\n\nIf a SMILE structure is mentioned, find what is the InChIKey notation of the molecule with SMILE_CONVERTER. Input is the SMILE structure. For example, if there is a string with similar structure to CCC12CCCN3C1C4(CC3) in the question, provide it to SMILE_CONVERTER.\n\nGive me units relevant to numerical values in this question. Return nothing if units for value is not provided.\nBe sure to say that these are the units of the quantities found in the knowledge graph.\nHere is the list of units to find:\n"retention time": "minutes",\n"activity value": null,\n"feature area": "absolute count or intensity",\n"relative feature area": "normalized area in percentage",\n"parent mass": "ppm (parts-per-million) for m/z",\n"mass difference": "delta m/z",\n"cosine": "score from 0 to 1. 1 = identical spectra. 0 = completely different spectra"\n\n\n    You are required to submit only the final answer to the supervisor. \n    provide the entity passed to the tool, the IRI and the type of the IRI. \n    For example:\n    "salicin, http://purl.obolibrary.org/obo/CHEBI_88293, CHEBI;\n    acer saccharum, http://www.wikidata.org/entity/Q132023, Wikidata"\n '}, {'role': 'user', 'content': 'Which extracts have features (pos ionization mode) annotated as the class, aspidosperma-type alkaloids, by CANOPUS with a probability score above 0.5, ordered by the decresing count of features as aspidosperma-type alkaloids? Group by extract.'}, {'role': 'user', 'content': 'Starting the processing of the question.'}], 'model': 'gpt-4-0125-preview', 'n': 1, 'stream': True, 'temperature': 0.0, 'tools': [{'type': 'function', 'function': {'name': 'TARGET_RESOLVER', 'description': '\n    Convert a target_name string to ChEMBLTarget notation using the CHEMBL API.\n    The function takes a target string as input and returns the ChEMBLTarget IRI.\n\n    Args:\n        target_name (str): A string containing the target_name representation.\n    Returns:\n        str: A string containing the ChEMBLTarget notation.\n    ', 'parameters': {'properties': {'__arg1': {'title': '__arg1', 'type': 'string'}}, 'required': ['__arg1'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'SMILES_RESOLVER', 'description': '\n    Convert a SMILES string to InChIKey notation using the GNPS API.\n    The function takes a SMILES string as input and returns the InChIKey notation of the molecule.\n\n    Args:\n        smiles (str): A string containing the SMILES representation of a molecule.\n    Returns:\n        str: A string containing the InChIKey notation of the molecule.\n\n    Example usage:\n    smiles_string = "CCC12CCCN3C1C4(CC3)C(CC2)NC5=CC=CC=C45"\n    inchikey = _run(smiles_string)\n    ', 'parameters': {'properties': {'__arg1': {'title': '__arg1', 'type': 'string'}}, 'required': ['__arg1'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'CHEMICAL_RESOLVER', 'description': '\n    Resolves chemicals to InChi keys.\n    Try to fetch the chemical InCHikey from National cancer institute API, if none, fallback to the NPCClass retriever,\n    which is a specific database correspondence between chemical names and NPC class URIs from ENPKG.\n\n    Args:\n        chemical_name str : the chemical name string.\n\n    Returns:\n        Dict[str, str]: a dictionary that contains the output chemical name and corresponding URI.\n    ', 'parameters': {'properties': {'__arg1': {'title': '__arg1', 'type': 'string'}}, 'required': ['__arg1'], 'type': 'object'}}}, {'type': 'function', 'function': {'name': 'TAXON_RESOLVER', 'description': '\n    Takes a taxon name string as input, builds a query, executes it, and returns\n    the Wikidata IRI if found.\n\n    Args:\n        taxon_name (str): A string that represents the name of a taxon.\n\n    Returns:\n        str: A string that contains the Wikidata IRI if found, otherwise `None`.\n    ', 'parameters': {'properties': {'__arg1': {'title': '__arg1', 'type': 'string'}}, 'required': ['__arg1'], 'type': 'object'}}}]}}
2024-04-26 17:08:56 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2024-04-26 17:08:56 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x121c11bd0>
2024-04-26 17:08:56 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x121669370> server_hostname='api.openai.com' timeout=None
2024-04-26 17:08:56 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x121b6a610>
2024-04-26 17:08:56 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-26 17:08:56 - httpcore.http11 - DEBUG - send_request_headers.complete
2024-04-26 17:08:56 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-26 17:08:56 - httpcore.http11 - DEBUG - send_request_body.complete
2024-04-26 17:08:56 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-26 17:08:56 - urllib3.connectionpool - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-26 17:08:57 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 26 Apr 2024 15:08:57 GMT'), (b'Content-Type', b'text/event-stream'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'Cache-Control', b'no-cache, must-revalidate'), (b'openai-model', b'gpt-4-0125-preview'), (b'openai-organization', b'user-s3ol6daonpe1vlpbnpxiymtp'), (b'openai-processing-ms', b'1404'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=15724800; includeSubDomains'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'1500000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'1499389'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'24ms'), (b'x-request-id', b'req_3f0dd2690f00bd07064bb1cc90582dff'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=XPkg0SsBT4YqbG55nYByPcL0cn4Tjr.frDFlgdjfkB0-1714144137-1.0.1.1-2T.uF4gR140DCYk2oGuAKeqmli_26KtxhfRuIjXs4pPqZhnoSrCZ06VJtefSl2A6XtyJFXdZLq.eA3sDdB06YA; path=/; expires=Fri, 26-Apr-24 15:38:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Set-Cookie', b'_cfuvid=E0BUsMgBrZEwdMtPDP17yfqAKDD2IiKFBlK5m44eOsU-1714144137737-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'87a77db2bf59914d-FRA'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-26 17:08:57 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-26 17:08:57 - openai._base_client - DEBUG - HTTP Request: POST https://api.openai.com/v1/chat/completions "200 OK"
2024-04-26 17:08:57 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-26 17:08:58 - httpcore.http11 - DEBUG - receive_response_body.complete
2024-04-26 17:08:58 - httpcore.http11 - DEBUG - response_closed.started
2024-04-26 17:08:58 - httpcore.http11 - DEBUG - response_closed.complete
2024-04-26 17:08:58 - urllib3.connectionpool - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-26 17:08:59 - app.core.agents.enpkg.tool_chemicals - ERROR - HTTPError occurred: 500 INTERNAL SERVER ERROR
2024-04-26 17:08:59 - app.core.agents.enpkg.tool_chemicals - INFO - InChIKey not found, trying NPC Classifier
2024-04-26 17:08:59 - langsmith.client - DEBUG - Closing Client.session
2024-04-26 17:08:59 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-26 17:08:59 - httpx - DEBUG - load_verify_locations cafile='/Users/benjamin/miniconda3/envs/kgai/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-26 17:08:59 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-26 17:08:59 - httpx - DEBUG - load_verify_locations cafile='/Users/benjamin/miniconda3/envs/kgai/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-26 17:08:59 - urllib3.connectionpool - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
